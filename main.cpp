/*******************************************************************************
* タイトル:		マジックタワー
* プログラム名:	main.cpp
* 作成者:		GP11B341 35 頼凱興
* 作成日:		2018/06/29
*******************************************************************************/

/*******************************************************************************
* インクルードファイル
*******************************************************************************/
#include "main.h"
#include "BackGround.h"
#include "Information.h"
#include "Item.h"
#include "Map.h"
#include "Message.h"
#include "Player.h"
#include "Status.h"
#include "Store.h"
#include "Title.h"

/*******************************************************************************
* マクロ定義
*******************************************************************************/


/*******************************************************************************
* 構造体定義
*******************************************************************************/


/*******************************************************************************
* プロトタイプ宣言
*******************************************************************************/
void Initialize();
void Title();
void Update();
void Draw();
void Uninitialize();

/*******************************************************************************
* グローバル変数
*******************************************************************************/


/*******************************************************************************
 関数名:	int main( void )
 引数:	void
 戻り値:	正常終了: int型の 0
 説明:	メイン関数
*******************************************************************************/
int main(void)
{
	// Console Windowの画面強制的に縦80、高さ25を設定する
	system("mode con: cols=80 lines=25");

	srand((unsigned)time(NULL));	// ランダムの初期化

	PLAYER *Player = GetPlayerAdr();	// Player情報のポインタ

	// 各種初期化処理
	Initialize();

	// タイトル
	Title();

	//Player->GameStart = true;

	if (Player->GameStart == true)
	{
		// ゲームのメインループ
		while (true)
		{
			// 各種更新処理
			Update();

			// 各種描画処理
			Draw();

			// キーが入力されたら
			Player->HitKey = _getch();
			if ((Player->HitKey == 0) || (Player->HitKey == 224))
			{
				Player->HitKey = _getch();
			}
			else if (Player->Event_No == GameExit && Player->HitKey == 'y')
			{
				Player->ExitGame = true;
			}

			// ゲーム終了
			if (Player->ExitGame == true)
			{
				break;
			}
		}
	}

	/* 終了 */
	return 0;
}

/*******************************************************************************
関数名:	void Anykey(void)
引数:	void
戻り値:	void
説明:	キー入力待ち
*******************************************************************************/
void Anykey(void)
{
	rewind(stdin);
	_getch();

	return;
}

/*******************************************************************************
関数名:	void Initialize()
引数:	void
戻り値:	void
説明:	ゲームの初期化
*******************************************************************************/
void Initialize()
{
	// マップの初期化処理
	InitMap();
	// プレイヤーの初期化処理
	InitPlayer();

	return;
}

/*******************************************************************************
関数名:	void Title()
引数:	void
戻り値:	void
説明:	ゲームタイトル処理
*******************************************************************************/
void Title()
{
	PLAYER *Player = GetPlayerAdr();

	while (true)
	{
		// タイトル描画
		DrawTitle();
		if (Player->GameStart == true)
		{
			// チュートリアル描画
			DrawTutorial();
			break;
		}
		//　ゲーム終了
		else if (Player->ExitGame == true)
		{
			break;
		}
	}

	return;
}

/*******************************************************************************
関数名:	void Update(void)
引数:	void
戻り値:	void
説明:	ゲームの更新処理
*******************************************************************************/
void Update(void)
{
	// プレイヤーの更新処理
	UpdatePlayer();
	// マップの更新処理
	UpdateMap();		

	return;
}

/*******************************************************************************
関数名:	void Draw(void)
引数:	void
戻り値:	void
説明:	ゲーム画面の描画処理
*******************************************************************************/
void Draw(void)
{
	PLAYER *Player = GetPlayerAdr();

	// プレイヤー位置描画
	DrawPlayer();
	// マップ描画
	DrawMap();
	// プレイヤーは商店の中
	if (Player->InStore == true)
	{
		// 商店描画
		DrawStore();
	}
	// プレイヤーステータス描画
	DrawStatus();
	// 発生したイベントの番号
	if (Player->Event_No != Nothing)
	{
		// メッセージ描画
		DrawMessage();
	}
	// ゲーム情報描画
	DrawInformation();
	// 背景描画
	DrawBG();

	return;
}

/*******************************************************************************
関数名:	void Uninitialize()
引数:	void
戻り値:	void
説明:	ゲームの終了処理
*******************************************************************************/
void Uninitialize()
{
	return;
}